packages:
  yum:
    python3-devel: []
    gcc: []
    nginx: []

option_settings:
  aws:elasticbeanstalk:container:python:
    WSGIPath: backend.app.main:app # Keep this if Elastic Beanstalk requires it for platform init
  aws:elasticbeanstalk:environment:
    LoadBalancerType: application
  aws:elasticbeanstalk:environment:proxy:
    ProxyServer: nginx
  aws:elasticbeanstalk:application:
    Application Healthcheck URL: /api/health
  aws:elasticbeanstalk:environment:process:default:
    Port: 80
  aws:elasticbeanstalk:application:environment:
    PYTHONPATH: "/var/app/current"
    PORT: 8000
    STREAMLIT_PORT: 8501
  
  # Enable CloudWatch logs
  aws:elasticbeanstalk:cloudwatch:logs:
    StreamLogs: true
    DeleteOnTerminate: false
    RetentionInDays: 30

files:
  # CloudWatch configuration
  /opt/aws/amazon-cloudwatch-agent/bin/config.json:
    mode: '000644'
    owner: root
    group: root
    content: |
      {
        "logs": {
          "logs_collected": {
            "files": {
              "collect_list": [
                # Application logs
                {
                  "file_path": "/var/app/current/backend/app.log*", # Assuming these are actual logs
                  "log_group_name": "`{"Fn::Join":["/", ["/aws/elasticbeanstalk", { "Ref":"AWSEBEnvironmentName" }, "backend/app.log"]]}`",
                  "log_stream_name": "{instance_id}"
                },
                {
                  "file_path": "/var/app/current/frontend/app.log*", # Assuming these are actual logs
                  "log_group_name": "`{"Fn::Join":["/", ["/aws/elasticbeanstalk", { "Ref":"AWSEBEnvironmentName" }, "frontend/app.log"]]}`",
                  "log_stream_name": "{instance_id}"
                },
                # Nginx logs
                {
                  "file_path": "/var/log/nginx/access.log",
                  "log_group_name": "`{"Fn::Join":["/", ["/aws/elasticbeanstalk", { "Ref":"AWSEBEnvironmentName" }, "nginx/access.log"]]}`",
                  "log_stream_name": "{instance_id}"
                },
                {
                  "file_path": "/var/log/nginx/error.log",
                  "log_group_name": "`{"Fn::Join":["/", ["/aws/elasticbeanstalk", { "Ref":"AWSEBEnvironmentName" }, "nginx/error.log"]]}`",
                  "log_stream_name": "{instance_id}"
                },
                {
                  "file_path": "/var/log/app/fastapi.log", # Corrected path
                  "log_group_name": "`{"Fn::Join":["/", ["/aws/elasticbeanstalk", { "Ref":"AWSEBEnvironmentName" }, "fastapi.log"]]}`",
                  "log_stream_name": "{instance_id}"
                },
                {
                  "file_path": "/var/log/app/streamlit.log", # Corrected path
                  "log_group_name": "`{"Fn::Join":["/", ["/aws/elasticbeanstalk", { "Ref":"AWSEBEnvironmentName" }, "streamlit.log"]]}`",
                  "log_stream_name": "{instance_id}"
                }
              ]
            }
          }
        }
      }

  # Custom Nginx proxy configuration
  "/etc/nginx/conf.d/elasticbeanstalk/proxy.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      upstream fastapi {
          server 127.0.0.1:8000;
      }

      upstream streamlit {
          server 127.0.0.1:8501;
      }

      server {
          listen 80;
          server_name _;

          # Health check endpoint
          location /api/health {
              return 200 'OK';
              add_header Content-Type text/plain;
          }
          
          # Fast API Root path redirect to /app
          location = / {
              return 301 /app/;
          }

          # FastAPI backend
          location /api/ {
              proxy_pass http://fastapi/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
          }

          # Streamlit frontend
          location /app/ {
              proxy_pass http://streamlit/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
          }
      }